package main

import (
	"context"
	"encoding/json"
	"log"
	"net/http"
	"sync"

	"github.com/ekomobile/dadata/v2"
	"github.com/ekomobile/dadata/v2/api/suggest"
	"github.com/ekomobile/dadata/v2/client"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/jwtauth/v5"
	"golang.org/x/crypto/bcrypt"
)

//go:generate swagger generate spec -o ./swagger.json --scan-models

var tokenAuth *jwtauth.JWTAuth

func init() {
	tokenAuth = jwtauth.New("HS256", []byte("secret"), nil)
}

var userStore = struct {
	sync.RWMutex
	users map[string]interface{}
}{users: make(map[string]interface{})}

type User struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

// swagger:parameters searchAddress
type SearchRequest struct {
	// in:body
	Query string `json:"query"`
}

// swagger:model
type Address struct {
	// in:body
	City string `json:"city"`
}

// swagger:response searchAddressResponse
type SearchResponse struct {
	// in:body
	Addresses []*Address `json:"addresses"`
}

// swagger:parameters geocodeAddress
type GeocodeRequest struct {
	// in:body
	Lat string `json:"lat"`
	Lon string `json:"lon"`
}

// swagger:response geocodeAddressResponse
type GeocodeResponse struct {
	// in:body
	Addresses []*Address `json:"addresses"`
}

func main() {
	r := chi.NewRouter()

	r.Use(middleware.Logger)

	r.Post("/api/register", Register)

	r.Post("/api/login", Login)

	r.Group(func(r chi.Router) {
		r.Use(jwtauth.Verifier(tokenAuth))
		r.Use(jwtauth.Authenticator(tokenAuth))

		r.Post("/api/address/search", Search)

		r.Post("/api/address/geocode", Geocode)
	})

	http.ListenAndServe(":8080", r)
}

func Register(w http.ResponseWriter, r *http.Request) {
	var req User

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Ошибка при хешировании пароля", 500)
		return
	}

	if _, ok := userStore.users[req.Name]; ok == true {
		http.Error(w, "Пользователь существует", 403)
	}

	passwordHash, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	if err != nil {
		http.Error(w, "Ошибка при хешировании пароля", http.StatusInternalServerError)
		return
	}
	userStore.Lock()
	userStore.users[req.Name] = string(passwordHash)
	userStore.Unlock()
	_, tokenString, _ := tokenAuth.Encode(map[string]interface{}{req.Name: req.Password})

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(map[string]string{"token": tokenString}); err != nil {
		log.Println("Error encoding response:", err)
	}
}

func Login(w http.ResponseWriter, r *http.Request) {
	var req User
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Ошибка при хешировании пароля", http.StatusInternalServerError)
		return
	}

	if _, ok := userStore.users[req.Name]; ok != true {
		http.Error(w, "Пользователь не существует", 200)
	}

	hashedPasswordStr := userStore.users[req.Name].(string)

	if bcrypt.CompareHashAndPassword([]byte(hashedPasswordStr), []byte(req.Password)) != nil {
		http.Error(w, "Неверный парорль", 200)
	}
	_, tokenString, _ := tokenAuth.Encode(map[string]interface{}{req.Name: req.Password})

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(map[string]string{"token": tokenString}); err != nil {
		log.Println("Error encoding response:", err)
	}
}

func Geocode(w http.ResponseWriter, r *http.Request) {
	var req GeocodeRequest

	creds := client.Credentials{
		ApiKeyValue:    "45da51d74379e42196f26bd5e23076f5b3ad7916",
		SecretKeyValue: "3890ad9d233ea66963994bb613ac02c264efbb0b",
	}

	api := dadata.NewSuggestApi(client.WithCredentialProvider(&creds))

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, http.StatusText(400), 400)
		return
	}

	geolocateParams := &suggest.GeolocateParams{
		Lat:          req.Lat,
		Lon:          req.Lon,
		Count:        1,
		RadiusMeters: 50,
		Language:     "ru",
	}

	log.Println("geolocateParams: ", geolocateParams)

	geocodeData, err := api.GeoLocate(context.Background(), geolocateParams)
	if err != nil {
		http.Error(w, http.StatusText(500), 500)
		return
	}

	var addresses []*Address
	for _, data := range geocodeData {
		addresses = append(addresses, &Address{City: data.Data.City})
	}

	log.Println("addresses: ", *addresses[0])

	resp := GeocodeResponse{Addresses: addresses}

	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Accept", "application/json")
	if err := json.NewEncoder(w).Encode(resp); err != nil {
		http.Error(w, http.StatusText(500), 500)
	}
}

func Search(w http.ResponseWriter, r *http.Request) {
	var searchRequest SearchRequest

	creds := client.Credentials{
		ApiKeyValue:    "45da51d74379e42196f26bd5e23076f5b3ad7916",
		SecretKeyValue: "3890ad9d233ea66963994bb613ac02c264efbb0b",
	}

	api := dadata.NewSuggestApi(client.WithCredentialProvider(&creds))

	if err := json.NewDecoder(r.Body).Decode(&searchRequest); err != nil {
		http.Error(w, http.StatusText(400), 400)
		return
	}

	log.Println("Query: ", searchRequest.Query)

	addresses, err := api.GeoIP(context.Background(), searchRequest.Query)
	if err != nil {
		http.Error(w, http.StatusText(500), 500)
		return
	}

	log.Println("Address: ", addresses.Location.Value)

	var searchResponse SearchResponse
	searchResponse.Addresses = []*Address{{City: addresses.Location.Value}}

	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Accept", "application/json")
	if err := json.NewEncoder(w).Encode(searchResponse); err != nil {
		http.Error(w, http.StatusText(500), 500)
	}
}
